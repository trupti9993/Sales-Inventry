-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               5.5.30 - MySQL Community Server (GPL)
-- Server OS:                    Win32
-- HeidiSQL Version:             12.1.0.6537
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


-- Dumping database structure for sales_inventery
DROP DATABASE IF EXISTS `sales_inventery`;
CREATE DATABASE IF NOT EXISTS `sales_inventery` /*!40100 DEFAULT CHARACTER SET latin1 */;
USE `sales_inventery`;
-- Dumping structure for procedure sales_inventery.deleteEmployee
DROP PROCEDURE IF EXISTS `deleteEmployee`;
DELIMITER //
CREATE PROCEDURE `deleteEmployee`(
	IN `empId` INT,
	OUT `status` INT

)
BEGIN

DECLARE FoundCount INT;
SET status=0;

	select sum(cnt) into FoundCount
from (
    select count(*) as cnt from purchase WHERE emp_id = empId
    union all
    select count(*) as cnt from sales WHERE emp_id = empId
    union all
    select count(*) as cnt from payment WHERE emp_id = empId
    union all
    select count(*) as cnt from receipt WHERE emp_id = empId
    
) as cnt;
	
	if FoundCount=0 THEN
		DELETE FROM employee WHERE emp_id = empId;	
		SET status=1;
	END IF;

END//
DELIMITER ;

-- Dumping structure for procedure sales_inventery.deleteParty
DROP PROCEDURE IF EXISTS `deleteParty`;
DELIMITER //
CREATE PROCEDURE `deleteParty`(
	IN `partyId` INT,
	OUT `status` INT

)
BEGIN

DECLARE FoundCount INT;
SET status=0;

	select sum(cnt) into FoundCount
from (
    select count(*) as cnt from purchase WHERE party_id = partyId
    union all
    select count(*) as cnt from sales WHERE party_id = partyId
    union all
    select count(*) as cnt from payment WHERE party_id = partyId
    union all
    select count(*) as cnt from receipt WHERE party_id = partyId
    
) as cnt;
	
	if FoundCount=0 THEN
		DELETE FROM party WHERE party_id = partyId;		
		SET status=1;
	END IF;

END//
DELIMITER ;

-- Dumping structure for procedure sales_inventery.deletePayment
DROP PROCEDURE IF EXISTS `deletePayment`;
DELIMITER //
CREATE PROCEDURE `deletePayment`(
	IN `paymentId` INT,
	OUT `status` INT

)
BEGIN


SET status=0;


		DELETE FROM payment WHERE payment_id = paymentId;	
		SET status=1;


END//
DELIMITER ;

-- Dumping structure for procedure sales_inventery.deleteProduct
DROP PROCEDURE IF EXISTS `deleteProduct`;
DELIMITER //
CREATE PROCEDURE `deleteProduct`(
	IN `productId` INT,
	OUT `status` INT

)
BEGIN

DECLARE FoundCount INT;
SET status=0;

	SELECT COUNT(*) into FoundCount FROM purchase WHERE prod_id = productId;	
	
	if FoundCount=0 THEN
		DELETE FROM product  WHERE prod_id = productId;	
		SET status=1;
	END IF;

END//
DELIMITER ;

-- Dumping structure for procedure sales_inventery.deletePurchase
DROP PROCEDURE IF EXISTS `deletePurchase`;
DELIMITER //
CREATE PROCEDURE `deletePurchase`(
	IN `purchaseId` INT,
	OUT `status` INT

)
BEGIN

DECLARE FoundCount INT;
SET status=0;

	SELECT COUNT(*) into FoundCount FROM payment WHERE purchase_id = purchaseId;	
	
	if FoundCount=0 THEN
		DELETE FROM purchase WHERE purchase_id = purchaseId;		
		SET status=1;
	END IF;

END//
DELIMITER ;

-- Dumping structure for procedure sales_inventery.deleteReceipt
DROP PROCEDURE IF EXISTS `deleteReceipt`;
DELIMITER //
CREATE PROCEDURE `deleteReceipt`(
	IN `receiptId` INT,
	OUT `status` INT

)
BEGIN


SET status=0;


		DELETE FROM receipt WHERE receipt_id = receiptId;	
		SET status=1;


END//
DELIMITER ;

-- Dumping structure for procedure sales_inventery.deleteSale
DROP PROCEDURE IF EXISTS `deleteSale`;
DELIMITER //
CREATE PROCEDURE `deleteSale`(
	IN `saleId` INT,
	OUT `status` INT

)
BEGIN

DECLARE FoundCount INT;
SET status=0;

	SELECT COUNT(*) into FoundCount FROM receipt WHERE sale_id = saleId;	
	
	if FoundCount=0 THEN
		DELETE FROM sales WHERE sale_id = saleId;	
		SET status=1;
	END IF;

END//
DELIMITER ;

-- Dumping structure for table sales_inventery.employee
DROP TABLE IF EXISTS `employee`;
CREATE TABLE IF NOT EXISTS `employee` (
  `emp_id` int(11) NOT NULL AUTO_INCREMENT,
  `emp_name` varchar(25) NOT NULL,
  `address` varchar(250) DEFAULT NULL,
  `email` varchar(25) DEFAULT NULL,
  `mobile_no` varchar(25) DEFAULT NULL,
  `password` varchar(25) DEFAULT NULL,
  `man_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`emp_id`),
  KEY `FK_employee_employee` (`man_id`),
  CONSTRAINT `FK_employee_employee` FOREIGN KEY (`man_id`) REFERENCES `employee` (`emp_id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;

-- Dumping data for table sales_inventery.employee: ~0 rows (approximately)
DELETE FROM `employee`;

-- Dumping structure for table sales_inventery.party
DROP TABLE IF EXISTS `party`;
CREATE TABLE IF NOT EXISTS `party` (
  `party_id` int(11) NOT NULL AUTO_INCREMENT,
  `party_name` varchar(25) NOT NULL,
  `address` varchar(250) DEFAULT NULL,
  `email` varchar(25) DEFAULT NULL,
  `mobile_no` varchar(25) DEFAULT NULL,
  PRIMARY KEY (`party_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;

-- Dumping data for table sales_inventery.party: ~0 rows (approximately)
DELETE FROM `party`;

-- Dumping structure for table sales_inventery.payment
DROP TABLE IF EXISTS `payment`;
CREATE TABLE IF NOT EXISTS `payment` (
  `payment_id` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime NOT NULL,
  `emp_id` int(11) NOT NULL,
  `party_id` int(11) NOT NULL,
  `purchase_id` int(11) NOT NULL,
  `amount` double DEFAULT NULL,
  PRIMARY KEY (`payment_id`),
  KEY `emp_id` (`emp_id`),
  KEY `party_id` (`party_id`),
  KEY `purchase_id` (`purchase_id`),
  CONSTRAINT `payment_ibfk_1` FOREIGN KEY (`emp_id`) REFERENCES `employee` (`emp_id`),
  CONSTRAINT `payment_ibfk_2` FOREIGN KEY (`party_id`) REFERENCES `party` (`party_id`),
  CONSTRAINT `payment_ibfk_3` FOREIGN KEY (`purchase_id`) REFERENCES `purchase` (`purchase_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- Dumping data for table sales_inventery.payment: ~0 rows (approximately)
DELETE FROM `payment`;

-- Dumping structure for table sales_inventery.product
DROP TABLE IF EXISTS `product`;
CREATE TABLE IF NOT EXISTS `product` (
  `prod_id` int(11) NOT NULL AUTO_INCREMENT,
  `prod_name` varchar(25) NOT NULL,
  `prod_type` varchar(25) NOT NULL,
  `prod_unit` varchar(25) DEFAULT NULL,
  `no_of_decimals` int(11) DEFAULT NULL,
  PRIMARY KEY (`prod_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;

-- Dumping data for table sales_inventery.product: ~0 rows (approximately)
DELETE FROM `product`;

-- Dumping structure for table sales_inventery.purchase
DROP TABLE IF EXISTS `purchase`;
CREATE TABLE IF NOT EXISTS `purchase` (
  `purchase_id` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime NOT NULL,
  `emp_id` int(11) NOT NULL,
  `party_id` int(11) NOT NULL,
  `quantity` double DEFAULT NULL,
  `rate` double DEFAULT NULL,
  `amount` double DEFAULT NULL,
  `discount` double DEFAULT NULL,
  `tax` double DEFAULT NULL,
  `net_amount` double DEFAULT NULL,
  PRIMARY KEY (`purchase_id`),
  KEY `emp_id` (`emp_id`),
  KEY `party_id` (`party_id`),
  CONSTRAINT `purchase_ibfk_1` FOREIGN KEY (`emp_id`) REFERENCES `employee` (`emp_id`),
  CONSTRAINT `purchase_ibfk_2` FOREIGN KEY (`party_id`) REFERENCES `party` (`party_id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;

-- Dumping data for table sales_inventery.purchase: ~0 rows (approximately)
DELETE FROM `purchase`;

-- Dumping structure for table sales_inventery.receipt
DROP TABLE IF EXISTS `receipt`;
CREATE TABLE IF NOT EXISTS `receipt` (
  `receipt_id` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime NOT NULL,
  `emp_id` int(11) NOT NULL,
  `party_id` int(11) NOT NULL,
  `sales_id` int(11) NOT NULL,
  `amount` double DEFAULT NULL,
  PRIMARY KEY (`receipt_id`),
  KEY `emp_id` (`emp_id`),
  KEY `party_id` (`party_id`),
  KEY `sales_id` (`sales_id`),
  CONSTRAINT `receipt_ibfk_1` FOREIGN KEY (`emp_id`) REFERENCES `employee` (`emp_id`),
  CONSTRAINT `receipt_ibfk_2` FOREIGN KEY (`party_id`) REFERENCES `party` (`party_id`),
  CONSTRAINT `receipt_ibfk_3` FOREIGN KEY (`sales_id`) REFERENCES `sales` (`sales_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- Dumping data for table sales_inventery.receipt: ~0 rows (approximately)
DELETE FROM `receipt`;

-- Dumping structure for table sales_inventery.sales
DROP TABLE IF EXISTS `sales`;
CREATE TABLE IF NOT EXISTS `sales` (
  `sales_id` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime NOT NULL,
  `emp_id` int(11) NOT NULL,
  `party_id` int(11) NOT NULL,
  `quantity` double DEFAULT NULL,
  `rate` double DEFAULT NULL,
  `amount` double DEFAULT NULL,
  `discount` double DEFAULT NULL,
  `tax` double DEFAULT NULL,
  `net_amount` double DEFAULT NULL,
  PRIMARY KEY (`sales_id`),
  KEY `emp_id` (`emp_id`),
  KEY `party_id` (`party_id`),
  CONSTRAINT `sales_ibfk_1` FOREIGN KEY (`emp_id`) REFERENCES `employee` (`emp_id`),
  CONSTRAINT `sales_ibfk_2` FOREIGN KEY (`party_id`) REFERENCES `party` (`party_id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- Dumping data for table sales_inventery.sales: ~0 rows (approximately)
DELETE FROM `sales`;

/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, 'system') */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */;
